<?php

/**
 * Implements hook_menu().
 */
function crf_checkout_menu() {
  $items = array();

  $items['checkout/%node/json'] = array(
    'page callback' => 'crf_checkout_checkout_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function crf_checkout_checkout_callback($node) {
  $form_build = drupal_get_form('crf_checkout_form_standalone', $node);
  $checkout_form = render($form_build);
  $output = drupal_json_encode($checkout_form);

  return drupal_json_output($output);
}

function crf_checkout_form_standalone($form, &$form_state, $node) {
  global $user;

  $data = array(
    'uid' => $user->uid,
    'nid' => $node->nid,
    'comment' => $_POST['comment'],
    'amount' => $node->field_cost_per_field[LANGUAGE_NONE][0]['value'],
    'selection' => $_POST['selection'],
    'aof' => count( json_decode($_POST['selection']) ),
    'perks' => $_POST['perks'],
    'total' => 0,
    'title' => $node->title,
  );

  $payment = new Payment(array(
    'context_data' => $data,
    'currency_code' => 'EUR',
    'description' => t('Visual crowdfunding campaign'),
    'finish_callback' => '_crf_checkout_payment_complete',
  ));

  // Create field line items in checkout form
  if ( count( json_decode($data['selection']) ) > 0 ) {
    $payment->setLineItem(new PaymentLineItem(array(
      'amount' => $data['amount'],
      'name' => t('fields'),
      'description' => t('Piece(s) of visual crowdfunding campaign'),
      'quantity' => $data['aof'],
    )));

    // Add crowdfun pieces to total
    $data['total'] += $data['amount'] * $data['aof'];
  }

  // Create perk line items in checkout form
  if ( count( json_decode($data['perks'], TRUE) ) > 0 ) {
    $perks = json_decode($data['perks'], TRUE);

    foreach ($perks as $value) {
      $perk = node_load($value['nid']);
      $perk_stock = $perk->field_stock[LANGUAGE_NONE][0]['value'];

      if ($value['quantity'] > 0 && $value['quantity'] <= $perk_stock) {
        $payment->setLineItem(new PaymentLineItem(array(
          'amount' => $perk->field_cost_per_perk[LANGUAGE_NONE][0]['value'],
          'name' => t('perk @nid', array('@nid' => $perk->nid) ),
          'description' => $perk->title,
          'quantity' => $value['quantity'],
        )));
      }

      // Add perks to total
      $data['total'] += $perk->field_cost_per_perk[LANGUAGE_NONE][0]['value'] * $value['quantity'];
    }
  }

  // We currently support one payment method
  $pmid = $node->field_payment_method[LANGUAGE_NONE][0]['value'];
  $pmids = array( $pmid );

  // When selected payment method is Mollie, create fee line item
  /*if ( $pmids == array(3) ) {
    // Calculate percentage fee
    $payment->setLineItem(new PaymentLineItem(array(
      'amount' => number_format(($data['total'] / 100) * $fee_percentage, 2),
      'name' => t('fee'),
      'description' => t('Crowdfun.co fee (@percentage%)', array('@percentage' => $fee_percentage)),
      'tax_rate' => 0.21,
      'quantity' => 1,
    )));

    $payment->setLineItem(new PaymentLineItem(array(
      'amount' => 0.5,
      'name' => t('transaction'),
      'description' => t('Transaction costs'),
      'quantity' => 1,
    )));

  }*/

  $form_info = payment_form_embedded($form_state, $payment, $pmids);
  $form = $form_info['elements'];

  $form['comment'] = array(
    '#type' => 'textfield',
    '#title' => t('Comment'),
    '#required' => false,
  );

  $form['terms_of_service'] = array(
    '#type' => 'checkbox',
    '#title' => t('I agree with the terms of service'),
    '#required' => true,
  );

  $form['selection'] = array(
    '#type' => 'hidden',
    '#value' => $data['selection'],
  );

  $form['perks'] = array(
    '#type' => 'hidden',
    '#value' => $data['perks'],
  );

  $form['#submit'] = array_merge($form_info['submit'], array('crf_checkout_form_standalone_submit'));

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $form['actions']['save'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array(
        'disabled'
      ),
    ),
    '#value' => $payment->pid ? t('Save') : t('Pay now!'),
  );

  if ($payment->pid) {
    $form['actions']['delete'] = array(
      '#type' => 'link',
      '#title' => t('Delete'),
      '#href' => 'payment/' . $payment->pid . '/delete',
      '#access' => payment_access('delete', $payment),
    );
  }

  return $form;
}

function crf_checkout_form_standalone_submit(array $form, array &$form_state) {
  /** @var Payment $payment */
  $payment = $form_state['payment'];

  // Save the payment.
  entity_save('payment', $payment);

  // Execute the payment.
  if ($payment->getStatus()->status == PAYMENT_STATUS_NEW) {
    $payment->execute();
  }
  if (payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_FAILED)) {
    $form_state['rebuild'] = TRUE;
  }

  // Redirect the user.
  if (payment_access('view', $payment)) {
    $form_state['redirect'] = 'payment/' . $payment->pid;
  }
}

function _crf_checkout_payment_validate($payment) {
  sdpm($payment);
}

function _crf_checkout_payment_complete($payment) {

  if ( $payment->statuses[count($payment->statuses)-1]->status == 'payment_status_success' ) {
    // Create the contribution and return the nid to update with screenshot
    global $base_url;

    $nid =  $payment->context_data['nid'];
    $url = $base_url . '/screenshot/' . $nid;
    $dest = file_default_scheme() . '://' . variable_get('phantomjs_capture_dest', 'phantomjs');
    $filename = 'campaign_' . $nid . '_' . time() . '.png';
    $img_url = file_create_url($dest . '/' . $filename);

    $contribution_nid = _create_contribution($payment, $img_url);

    phantomjs_capture_screen($url, $dest, $filename);

    // Prepare mail
    global $user;
    $account = $user;

    $params['account'] = $account;
    $params['payment'] = $payment;

    drupal_mail('crf_checkout', 'confirmation', $account->mail, user_preferred_language($account), $params);

    // Return to the contribution
    $alias = drupal_get_path_alias('node/' . $contribution_nid);

    drupal_set_message('Congratulations! Your contribution is added to the campaigns.');
    drupal_goto($alias);
  }
  else {
    drupal_set_message('Oops! Something went wrong with your contribution.', 'warning');
  }

}

function _create_contribution($payment, $screenshot){
  $entity = entity_create('node', array('type' => 'contribution'));
  $contribution = entity_metadata_wrapper('node', $entity);

  $contribution->title->set( 'Contribution #' . $payment->pid );
  $contribution->author->set( $payment->context_data['uid'] );
  $contribution->field_campaign->set( $payment->context_data['nid'] );
  $contribution->field_comment->set( $payment->context_data['comment'] );
  $contribution->field_fieldset->set( serialize($payment->context_data['selection']) );
  $contribution->field_cost_per_field->set( number_format($payment->context_data['amount'], 2) );
  $contribution->field_additions->set( serialize($payment->context_data['perks']) );
  $contribution->field_total->set( number_format($payment->context_data['total'], 2) );
  $contribution->field_screenshot->set( $screenshot);
  $contribution->save();

  // Recount stock of perks
  $perk_nids = json_decode($payment->context_data['perks'], TRUE);

  foreach ($perk_nids as $perk_nid) {
    $perk = node_load($perk_nid['nid']);

    $current_stock = $perk->field_stock[LANGUAGE_NONE][0]['value'];
    $new_stock = $current_stock - $perk_nid['quantity'];

    // Insert the new stock value
    $perk->field_stock[LANGUAGE_NONE][0]['value'] = $new_stock;

    node_save($perk);
  }

  return $contribution->nid->value();
}

function crf_checkout_mail($key, &$message, $params) {
  $data['user'] = user_load($params['account']->uid);
  $data['payment'] = $params['payment'];
  $options['language'] = $message['language'];

  user_mail_tokens($variables, $data, $options);

  switch($key) {
    case 'confirmation':
      global $base_url;

      $langcode = $message['language']->language;
      $message['subject'] = t('[Crowdfun] Thank you for making a difference', $variables, array('langcode' => $langcode));

      $message['body'][] = '
      <h2>Thank you for making a difference!</h2>
      <p>' . $data['user']->field_first_name[LANGUAGE_NONE][0]['value'] . ', thank you for contributing to <strong style="color: #f06832;">' . $data['payment']->context_data['title'] . '</strong></p>
      <p><a href="' . $base_url . '/' . drupal_get_path_alias('node/' . $data['payment']->context_data['nid'] ) . '" target="_blank" style="display:inline-block; text-decoration:none; background-color:#37BFC3; font-size: 15px; color:#FFF; padding: 15px 20px; border: 1px solid transparent; border-radius: 4px; margin: 0 0 25px;">Visit campaign &amp; share!</a></p>';

      drupal_set_message('A confirmation e-mail has been sent to your e-mail address.');

      break;
  }
}
