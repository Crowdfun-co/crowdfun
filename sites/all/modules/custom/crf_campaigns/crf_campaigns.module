<?php

function crf_campaigns_menu() {
	$items['screenshot/%'] = array(
		'cache' => DRUPAL_NO_CACHE,
		'access callback' => TRUE,
    'page callback' => '_create_surface_screenshot',
		'page arguments' => array(1),
  );
  return $items;
}

function _create_surface_screenshot($nid) {
	drupal_page_is_cacheable(FALSE);
	$node = node_load($nid);
	$contributions = _create_contribution_array($nid);

	$amount_of_fields = $node->field_amount_of_fields[LANGUAGE_NONE][0]['value'];
	$surface_image_width = $node->field_surface_image[LANGUAGE_NONE][0]['width'];
	$surface_image_height = $node->field_surface_image[LANGUAGE_NONE][0]['height'];
	$cost_per_field = $node->field_cost_per_field[LANGUAGE_NONE][0]['value'];
	$dimensions = _calculate_surface_dimensions( $amount_of_fields, $surface_image_width, $surface_image_height);
	$surface_height = $dimensions[0];
	$surface_width = $dimensions[1];

	$campaign_goal = $node->field_goal[LANGUAGE_NONE][0]['value'];
	$surface_image_uri = $node->field_surface_image[LANGUAGE_NONE][0]['uri'];

	$surface_image_path = image_style_url('surface_image', $surface_image_uri);
  $surface_image_ratio = $surface_height / $surface_width;

	$configuration = array(
    'surfaceImagePath' => 'url(' . $surface_image_path . ')',
    'surfaceImageRatio' => $surface_image_ratio,
		'campaignProgress' => _calculate_campaign_progress($contributions, $campaign_goal),
    'campaignGoal' => $campaign_goal,
    'campaignId' => $nid,
  );

	drupal_add_js( array('crf_campaign' => $configuration), 'setting');
	drupal_add_js(drupal_get_path('module', 'crf_campaigns') . '/js/campaign-view.js', array('scope' => 'header'));

	$surface = _create_surface_array($surface_height, $surface_width, $contributions);
	$markup = '<table id="surface" style="width: 600px; min-height:315px; background-size: cover; background-position: center center;">' . _create_surface_markup(15, $surface) . '</table>';

	drupal_add_css('.l-header, .l-footer, .messages { display: none !important; } td {border: 1px solid transparent;} .closed { background-color: #48bfc1 !important; }', 'inline');

	return $markup;
}

/**
 * Preprocessor for theme('campaign_node_form').
 */
function template_preprocess_campaign_node_form(&$variables) {
	// hide($variables['form']['field_contributions']);

	// Hide configuration after node creation
	if (arg(1) != 'add') {
		hide($variables['form']['field_amount_of_fields']);
		hide($variables['form']['field_payment_method']);
	}
}


/**
 * Preprocessor for theme('perk_node_form').
 */
function template_preprocess_perk_node_form(&$variables) {
	// hide($variables['form']['field_contributions']);

	// Hide configuration after node creation
	if (arg(1) == 'add') {
		hide($variables['form']['field_sold_perks']);
	}
}


function crf_campaigns_node_presave($node) {

	// Only on the creation of a node
	if ($node->type == 'campaign' && arg(1) == 'add') {
		// Set variables
		$amount_of_fields = $node->field_amount_of_fields[LANGUAGE_NONE][0]['value'];
		$surface_image_width = $node->field_surface_image[LANGUAGE_NONE][0]['width'];
		$surface_image_height = $node->field_surface_image[LANGUAGE_NONE][0]['height'];
		$cost_per_field = $node->field_cost_per_field[LANGUAGE_NONE][0]['value'];

		// Calculate correct values
		$dimensions = _calculate_surface_dimensions( $amount_of_fields, $surface_image_width, $surface_image_height);

		$surface_height = $dimensions[0];
		$surface_width = $dimensions[1];

		$correct_amount_of_fields = $surface_width * $surface_height;
		$campaign_goal = $correct_amount_of_fields * $cost_per_field;

		// Save the correct surface_width and surface_height
		$node->field_surface_width[LANGUAGE_NONE][0]['value'] = $surface_width;
		$node->field_surface_height[LANGUAGE_NONE][0]['value'] = $surface_height;

		// Save the correct amount of fields
		$node->field_amount_of_fields[LANGUAGE_NONE][0]['value'] = $correct_amount_of_fields;


		// Loop through perks
		foreach ($node->field_perks[LANGUAGE_NONE] as $entity_id) {
		  $perk = node_load( $entity_id['target_id'] );

		  // Get the amount of available perks
			$amount_of_perks = $perk->field_amount_of_perks[LANGUAGE_NONE][0]['value'];

			// Get the amount of sold perks
			$perk->field_stock[LANGUAGE_NONE][0]['value'] = $amount_of_perks;

			// Save the values in the new node
			node_save($perk);
		}

		// Show new calculations
		drupal_set_message(t('We calculated that you need @correct_amount_of_fields fields.', array('@correct_amount_of_fields' => $correct_amount_of_fields, '@campaign_goal' => $campaign_goal) ), 'status');
	}
}

/**
 * Implements hook_theme().
 */
function crf_campaigns_theme($existing, $type, $theme, $path) {

  return array(
    'campaign_node_form' => array(
      'render element' => 'form',
      'template' => 'campaign-node-form',
      'path' => drupal_get_path('module', 'crf_campaigns') . '/templates',
    ),
  );
}

/**
 * Preprocessor for all nodes
 */
function crf_campaigns_preprocess_node(&$variables) {
	global $base_url;
	// Store the path alias for facebook share
	$variables['alias'] = drupal_get_path_alias('node/' . $variables['nid']);

	$og_url = array(
	 '#tag' => 'meta',
	 '#attributes' => array(
		 'property' => 'og:url',
		 'content' => $base_url . '/' . $variables['alias']
	 ),
	);

	drupal_add_html_head($og_url, 'og_url');

	if ( $variables['type'] === 'contribution') {
		$user = user_load($variables['uid']);

		if (!empty($user->picture)) {
			$fid = $user->picture->fid;
		} else{
			$fid = 0;
		}

		$variables['user'] = $user;
		$variables['user']->picture_url = _create_user_picture_url($fid);

		$img_url = $variables['field_screenshot'][0]['value'];

		$og_image = array(
		  '#tag' => 'meta',
		  '#attributes' => array(
		    'property' => 'og:image',
		    'content' => $img_url,
		  ),
		);

		drupal_add_html_head($og_image, 'og_image');

		$og_title = array(
		 '#tag' => 'meta',
		 '#attributes' => array(
			 'property' => 'og:title',
			 'content' => $variables['user']->field_first_name[LANGUAGE_NONE][0]['value'] . ' supports this campaign!',
		 ),
		);

		drupal_add_html_head($og_title, 'og_title');

		$og_description = array(
		 '#tag' => 'meta',
		 '#attributes' => array(
			 'property' => 'og:description',
			 'content' => 'Buy fields for a minumum of â‚¬' . number_format($variables['field_cost_per_field'][0]['value'],2,',','.') . ' or pick one of the available perks to help this campaign succeed.',
		 ),
		);

		drupal_add_html_head($og_description, 'og_description');

		// Handle perk display
		if (!empty($variables['field_additions'])) {
			$perks = $variables['field_additions'][LANGUAGE_NONE][0]['value'];
			$perks = json_decode( unserialize($perks), TRUE );
		} else {
			$perks = array();
		}

		$variables['perks'] = array();

		// Load perks from contribs
		foreach ($perks as $value) {

			$perk_nid = $value['nid'];
			$perk_quantity = $value['quantity'];

			$perk = node_load($value['nid']);

			$variables['perks'][] = array(
				'nid' => $perk->nid,
				'title' => $perk->title,
				'aop' => $value['quantity'],
				);
		}
	}

	if ( $variables['type'] === 'campaign' ) {

		$contributions = _create_contribution_array($variables['nid']);

		// Set the submitted line for
		$variables['submitted'] = t('by ') . $variables['name'];
		$variables['contributions'] = $contributions;

		$campaign_goal = $variables['field_goal'][LANGUAGE_NONE][0]['value'];

		// Set the percentage campaign completed
		if ( !empty($contributions) ) {
			$funded = _calculate_campaign_progress($contributions, $campaign_goal);
			$variables['funded'] = round($funded, 2);
		} else {
			$variables['funded'] = 0;
		}

	}

	if ($variables['type'] === 'campaign' && $variables['view_mode'] === 'full') {

		$img_url = file_create_url($variables['field_featured_image'][0]['uri']);

		$og_image = array(
		  '#tag' => 'meta',
		  '#attributes' => array(
		    'property' => 'og:image',
		    'content' => $img_url,
		  ),
		);

		drupal_add_html_head($og_image, 'og_image');

		// Add open graph meta tag for description
		$body_field  = field_view_field('node', $variables['node'], 'body', array('type' => 'text_plain'));

		$og_description = array(
		 '#tag' => 'meta',
		 '#attributes' => array(
		   'property' => 'og:description',
		   'content' => text_summary($body_field[0]['#markup']),
		 ),
		);

		drupal_add_html_head($og_description, 'og_description');

		if ($variables['field_perks']) {

			foreach ($variables['field_perks'][LANGUAGE_NONE] as $entity_id) {
			  $perk = node_load( $entity_id['target_id'] );

		    $variables['perks'][] = $perk;
			}

		}

		$surface_width = $variables['field_surface_width'][LANGUAGE_NONE][0]['value'];
		$surface_height = $variables['field_surface_height'][LANGUAGE_NONE][0]['value'];

		// If there is at least one contribution
		if ( !empty($contributions) )  {
			$surface = _create_surface_array($surface_height, $surface_width, $contributions);

		} else {
			// There are no contributions!
			$surface = _create_surface_array($surface_height, $surface_width, '');

			// drupal_set_message(t('Hi there! You are first to make a contribution to this campaign'), 'status');
		}

		$user = user_load($variables['user']->uid);
		$variables['user'] = $user;
		// Set user picture
		if (!empty($variables['user']->picture)) {
			$fid = $user->picture->fid;
		} else{
			$fid = 0;
		}

		$variables['user_picture'] = _create_user_picture_url($fid);

	  // Generate surface markup server side
	  $cpf = $variables['field_cost_per_field'][LANGUAGE_NONE][0]['value'];

	  $variables['content']['surface'] = array(
	  	'#markup' => _create_surface_markup($cpf, $surface ),
	    '#weight' => 11,
	  );

	  // Attach configuration object to the front end
	  drupal_add_js( array('crf_campaign' => _create_surface_configuration($variables, $contributions)), 'setting');

	  // Adds jquery ui libs for interaciton with the campaign field
  	drupal_add_library('system', 'ui.selectable');
  	drupal_add_library('system', 'ui.mouse');

	  // Add touchpunch for mobile touch event handling to the head
	  drupal_add_js(drupal_get_path('module', 'crf_campaigns') . '/js/vendor/jquery.ui.touch-punch.min.js', array('scope' => 'header'));

	  // Add the modules script to the head
	  drupal_add_js(drupal_get_path('module', 'crf_campaigns') . '/js/campaign-view.js', array('scope' => 'header'));

	}
}

/**
 * @todo For now this only counts the amount of fields. Perks should be
 * included in this calculation.
 */
function _calculate_campaign_progress($contributions, $goal) {
	$contribution_total = 0;
	$additional_total = 0;

	// Calculate the amount of money made from fields
	foreach ($contributions as $value) {
		$contribution = json_decode(unserialize($value->field_fieldset[LANGUAGE_NONE][0]['value']));
		$cpf = $value->field_cost_per_field[LANGUAGE_NONE][0]['value'];

		if ( !empty($value->field_additions[LANGUAGE_NONE][0]['value']) ) {
			// Calculate the amount of money made from perks
			$perks = json_decode(unserialize($value->field_additions[LANGUAGE_NONE][0]['value']));

			foreach ($perks as $value) {

				/**
				* @todo make this smarter! Can become a performance killer. Start using the contrib field_total field for example
				*/
				$perk = node_load( $value->nid );

				$cost_per_perk = $perk->field_cost_per_perk[LANGUAGE_NONE][0]['value'];

				$additional_total += ($cost_per_perk * $value->quantity);
			}

		}

		$contribution_total += (count($contribution) * $cpf) + $additional_total;
	}

	return $contribution_total;
}

/**
 * Builds the surface field markup based on the
 * contributions array
 * @param $cpf (the vertical coordinate)
 * @param $row_key (the vertical coordinate)
 * @param $col_key (the horizontal coordinate)
 * @param $data (holding contrib info)
 *
 * @return $output (contains the <TD>)
 */
function _create_field_markup($cpf, $row_key, $col_key, $data) {
	if( isset($data['nid']) ) {
		$output = '<td class="field closed" ';
		$output .= 'data-row-id="' . $row_key . '"';
	  $output .= 'data-col-id="' . $col_key . '"';
	  $output .= 'data-nid="' . $data['nid'] . '"';
	  $output .= 'data-uid="' . $data['uid'] . '"';
	  $output .= 'data-cpf="' . $data['cpf'] . '"';
	  $output .= '></td>';

	} else {
		$output = '<td class="field open"';
		$output .= 'data-row-id="' . $row_key . '"';
	  $output .= 'data-col-id="' . $col_key . '"';
		$output .= 'data-cpf="' . $cpf . '"';
		$output .= '></td>';

	}

	return $output;
}

/**
 * Builds the surface markup based on values in the node
 * and attached contributions
 * @param $cpf (cost per field)
 * @param $contributions (the contribtuion array of a campaign node)
 *
 * @return $output (contains all the <TR>'s')
 */
function _create_surface_markup($cpf, $surface) {
	$output = '';

	foreach ($surface as $row_key => $value) {
		$fields = '';

		foreach ($value as $col_key => $value) {
			$field = _create_field_markup($cpf, $row_key, $col_key, $value );
			$fields .= $field;
		}

		$output .= '<tr>' . $fields . '</tr>';
	}

	return $output;
}


/**
 * Build a representational array for the table markup
 *
 * @param $surface_height
 * @param $surface_width
 * @param $contributions
 *
 * @return $surface_array (Array containing contribution info)
 */
function _create_surface_array($surface_height, $surface_width, $contributions) {
	$surface_array = array();

	for ($y = 0; $y < $surface_height; $y++){
	  $surface_array[$y] = array();

	  for ($x = 0; $x < $surface_width; $x++){
	    $surface_array[ $y ][ $x ][] = '';

	  }
	}

	if ( !empty($contributions) ) {
		foreach ($contributions as $key => $contribution) {
			$fieldset = json_decode(unserialize($contribution->field_fieldset[LANGUAGE_NONE][0]['value']));
			$data = array(
				'nid' => $contribution->nid,
				'uid' => $contribution->uid,
				'cpf' => $contribution->field_cost_per_field[LANGUAGE_NONE][0]['value'],
			);

			if (!empty($fieldset)) {
				foreach ($fieldset as $key => $row) {
					$surface_array[ $row[1] ][ $row[0] ] = $data;

				}
			}
		}
	}

	return $surface_array;
}


/**
 * Calculates the precise amount of rows and columsn for the table. Based on
 * the approximate amount of fields as definied in node edit
 * @param $amount_of_fields (Approximate)
 * @param $surface_image_width
 * @param $surface_image_height
 *
 * @return $dimensions (array containing amount of rows and columns)
 */
function _calculate_surface_dimensions( $amount_of_fields, $surface_image_width, $surface_image_height) {

	$surface_size = $surface_image_width * $surface_image_height;

	$field_surface_size = $surface_size / $amount_of_fields;
	$field_side = sqrt($field_surface_size);

	$amount_of_cols = ceil( $surface_image_width / $field_side );
	$amount_of_rows = ceil( $surface_image_height / $field_side );

	$dimensions = array($amount_of_rows, $amount_of_cols);

	return $dimensions;
}


/**
 * Builds the settings object based on values in the node
 * @param $node object
 * @return $configuration array
  */
function _create_surface_configuration($campaign, $contributions) {
	$campaign_goal = $campaign['field_goal'][LANGUAGE_NONE][0]['value'];
	$surface_image_uri = $campaign['field_surface_image'][0]['uri'];
	$surface_width = $campaign['field_surface_image'][0]['width'];
	$surface_height = $campaign['field_surface_image'][0]['height'];
  $surface_image_path = image_style_url('surface_image', $surface_image_uri);
  $surface_image_ratio = $surface_height / $surface_width;

  $configuration = array(
    'surfaceImagePath' => 'url(' . $surface_image_path . ')',
    'surfaceImageRatio' => $surface_image_ratio,
		'campaignProgress' => _calculate_campaign_progress($contributions, $campaign_goal),
    'campaignGoal' => $campaign_goal,
    'campaignId' => $campaign['nid'],
  );

  return $configuration;
 }


function _create_contribution_array($nid) {
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'contribution')
		->propertyCondition('status', NODE_PUBLISHED)
		->fieldCondition('field_campaign', 'value', $nid, '=')
		->propertyOrderBy('created', 'DESC');
	$result = $query->execute();

	if (isset($result['node'])) {
	  $contrib_nids = array_keys($result['node']);
	  $contributions = entity_load('node', $contrib_nids);
	} else {
		$contributions = array();
	}

	// Loop through contribs
	foreach ($contributions as $contribution) {

		$user = user_load($contribution->uid);

		if (!empty($user->picture)) {
			$fid = $user->picture->fid;
		} else{
			$fid = 0;
		}

		$contribution->user = $user;
		$contribution->user->picture_url = _create_user_picture_url($fid);

		// Handle perk display
		if (!empty($contribution->field_additions)) {
			$perks = $contribution->field_additions[LANGUAGE_NONE][0]['value'];
			$perks = json_decode( unserialize($perks), TRUE );
		} else {
			$perks = array();
		}

		$contribution->perks = array();

		// Load perks from contribs
		foreach ($perks as $value) {

			$perk_nid = $value['nid'];
			$perk_quantity = $value['quantity'];

			$perk = node_load($value['nid']);

			$contribution->perks[] = array(
				'nid' => $perk->nid,
				'title' => $perk->title,
				'aop' => $value['quantity'],
				);

		}

	}

	return $contributions;
}
